
(defun is-operator (str next)
    (cond
        ((string= str "+") "OP_PLUS")
        ((string= str "-") "OP_MINUS")
        ((string= str "/") "OP_DIV")
        ((string= str "(") "OP_OP")
        ((string= str ")") "OP_CP")
        ((string= str "\"") "OP_OC")
        ((string= str ",") "OP_COMMA")
        ((string= str "**") "OP_DBMULT")
        ((and (string= str "*") (string/= next "*")) "OP_MULT")
        (T NIL)
    )
)
(defun is-keyword (str)
    (setf s (string-upcase str))
    (cond
        ((string= s "AND") "KW_AND")
        ((string= s "OR") "KW_OR")
        ((string= s "NOT") "KW_NOT")
        ((string= s "EQUAL") "KW_EQUAL")
        ((string= s "LESS") "KW_LESS")
        ((string= s "NIL") "KW_NIL")
        ((string= s "LIST") "KW_LIST")
        ((string= s "APPEND") "KW_APPEND")
        ((string= s "CONCAT") "KW_CONCAT")
        ((string= s "SET") "KW_SET")
        ((string= s "DEFFUN") "KW_DEFFUN")
        ((string= s "FOR") "KW_FOR")
        ((string= s "IF") "KW_IF")
        ((string= s "EXIT") "KW_EXIT")
        ((string= s "LOAD") "KW_LOAD")
        ((string= s "DISP") "KW_DISP")
        ((string= s "TRUE") "KW_TRUE")
        ((string= s "FALSE") "KW_FALSE")
        (T NIL)
    )
)
(defun is-semicolon (value)
	(equal value ";")
)
(defun is-zero (value)
	(equal value "0")
)
(defun is-number (str)
	(setf c (char str 0))
    (not (null (digit-char-p c)))
)
(defun is-alpha (str)
    (setf c (char str 0))
    (alpha-char-p c)
)

(defun gppinterpreter (&optional filename)

)

(defun main ()
	 (if (null *args*)
        (gppinterpreter)
        (gppinterpreter (car *args*))
    )
)