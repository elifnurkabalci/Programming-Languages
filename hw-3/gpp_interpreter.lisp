(load "gpp_lexer.lisp")


(defun perform-op (op1 op2 op)
	(let ((num1 op1) (num2 op2)) 
        (cond ((string = "+" op) (+ num1 num2))
              ((string = "-" op) (- num1 num2))
              ((string = "*" op) (* num1 num2))
              ((string = "/" op) (/ num1 num2))
        )
    )
)
(defun is-op (token)
	(or (string = "OP_PLUS" token)
		(string = "OP_MINUS" token)
		(string = "OP_DIV" token)
		(string = "OP_MULT"token)
    )
)
(defun is-logic (token)
	(or (string = "and" token)
		(string = "or" token)
		(string = "equal" token)
		(string = "not" token)
    )
)
(defun remove-from-last(l)
    (reverse (cdr (reverse l))
    )
)
(defun add-to-last (lst a)
	(push a (cdr (last lst))) lst
)

(defun parser-interpreter-shell()
    (loop (format t "~%>>>>>") (start-parsing(read-line)) ;;parse-start
    )
)
(defun parser-interpreter-file(filename)
    ()
)
(defun parser-gppinterpreter (&optional filename)
	(if filename (parser-interpreter-file filename) 
                 (parser-interpreter-shell)
    )
)
(if *args* (parser-gppinterpreter (car *args*)) 
           (parser-gppinterpreter)
)